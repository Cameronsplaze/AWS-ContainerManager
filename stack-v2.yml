
AWSTemplateFormatVersion: 2010-09-09

Description: >- 
  Spin up EC2 when someone tries to connect to it,
  then destroy it when they're done! (Eventually...)

Parameters:

  InstanceType:
    Type: String
    Default: m5.large
    Description: Class of EC2 instance used to host containers. Choose t2 for testing, m5 for general purpose, c5 for CPU intensive services, and r5 for memory intensive services
    # AllowedValues: [
    #   t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
    #   m5.large, m5.xlarge, m5.2large, m5.4xlarge, m5.12xlarge, m5.24large,
    #   c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
    #   r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge
    # ]
    # ConstraintDescription: Please choose a valid instance type.

  GameContainer:
      Type: String
      Description: "uri of the container image to run"
      Default: itzg/minecraft-server:latest

  EcsTaskRequiredCpu:
    Type: Number
    Description: "Minimum vCPU allocation per task (CPU Threads x 1024)"
    Default: 1920 # 2 vCPU's minus chunk for nginx (2048 - 128)

  EcsTaskRequiredMemory:
    Type: Number
    Description: "Minimum RAM (Memory) allocation per task"
    # Default: 8192
    # (I think the OS reserves some, so this is what you're left with for 8192)
    Default: 7168 # (Instance has 8GB, always save 1GB for host, and 256 MG for nginx)

  GamePort:
    Type: Number
    Description: "The port to open, lets traffic into the container."
    Default: 25565

  GameProtocol:
    Type: String
    AllowedValues: [TCP, UDP]
    Description: The protocol the open port uses (udp/tcp)
    Default: TCP

  EcsAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
    Description: The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI

Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.69.0.0/16'
    PublicOne:
      CIDR: '10.69.0.0/24'
    PublicTwo:
      CIDR: '10.69.1.0/24'
    PrivateOne:
      CIDR: '10.69.2.0/24'
    PrivateTwo:
      CIDR: '10.69.3.0/24'

Resources:

  #######################
  ## ECS Cluster Stuff ##
  #######################

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the EC2 hosts that will run the containers.
  # Rules will be added depending on what ingress is created.
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-security-group"
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !GetAtt VPC.Outputs.VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: !Ref GameProtocol
          FromPort: !Ref GamePort
          ToPort: !Ref GamePort


  # To control the overall manager/cluster:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - GamePortListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref EcsTaskDefinition
      # Lambda will update DesiredCount as it's running:
      DesiredCount: 0
      LoadBalancers:
        - TargetGroupArn: !Ref ElbTargetGroup
          ContainerName: !Sub "GameManager-${AWS::StackName}-game"
          ContainerPort: !Ref GamePort

      DeploymentConfiguration:
        # Don't keep trying if the FIRST container fails to start:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentconfiguration.html
        DeploymentCircuitBreaker:
          Enable: True
          Rollback: False

  GamePortListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      LoadBalancerArn: !Ref V2LoadBalancer
      Port: !Ref GamePort
      Protocol: !Ref GameProtocol


  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - V2LoadBalancer
    Properties:
      ## Health Check Stuff:
      HealthCheckProtocol: !Ref GameProtocol
      HealthCheckPort: traffic-port
      # HealthCheckProtocol: HTTP
      # HealthCheckPort: 80
      ## Game Engine Stuff:
      Port: !Ref GamePort
      Protocol: !Ref GameProtocol
      VpcId: !GetAtt VPC.Outputs.VPC


  # What a single container in the cluster looks like:
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking-awsvpc.html
      # NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: !Sub "GameManager-${AWS::StackName}-game"
          # TODO: Cache this in same region AWS, so you don't pull a new image from dockerhub
          #       every time someone joins the server. (SUPER slow windup time).
          #       Might have to do a cron-lambda with:
          #       ECR: https://docs.aws.amazon.com/AmazonECS/latest/bestpracticesguide/pull-behavior.html
          Image: !Ref GameContainer
          Cpu: !Ref EcsTaskRequiredCpu
          MemoryReservation: !Ref EcsTaskRequiredMemory
          PortMappings:
            - ContainerPort: !Ref GamePort
              Protocol: !Ref GameProtocol
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-stream-prefix: GameManager
          Environment:
            - Name: EULA
              Value: "TRUE"

            # Doing this since server was stopped from rcon command. BUT security group only opens up
            # 25565, NOT 25575 which rcon listens on... Not sure what happened here...
            - Name: ENABLE_RCON
              Value: "false"
            # # OR:
            # - Name: RCON_PASSWORD
            #   Value: SOME_SUPER_SECRET_PASS_HERE

            # It might actually be the healthcheck happening, especially if it's on a port that the firewall is blocking:
            # https://bytemeta.vip/repo/itzg/docker-minecraft-server/issues/1144
            # Adding this to debug/test:
            - Name: DISABLE_HEALTHCHECK
              Value: "true"
        - Name: !Sub "GameManager-${AWS::StackName}-healthcheck"
          # AWS ECR so *hopefully* it pulls faster:
          Image: "public.ecr.aws/nginx/nginx:latest"
          Cpu: 128
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 80
              Protocol: HTTP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-stream-prefix: GameManager
          

  EcsTaskLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/ecs/GameManager-${AWS::StackName}'
      RetentionInDays: 14

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'EcsAmi'
      SecurityGroups: [!Ref 'ContainerSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

          ## This blocks cloudformation from being successful until the signal is sent
          ## BUT we want to deploy 0 containers, so the signal never reaches anyway:
          ## (plus not installing anything will speed up our "cold-start time".)
          # yum install -y aws-cfn-bootstrap
          # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !GetAtt VPC.Outputs.PublicSubnets
      LaunchConfigurationName: !Ref 'ContainerInstances'
      # Lambda will update the DesiredCapacity from 0 to 1:
      DesiredCapacity: 0
      MinSize: 0
      MaxSize: 1
      Tags:
      - Key: "Name"
        Value: !Sub "${AWS::StackName}-ECS-Instance"
        PropagateAtLaunch: true
    ## This blocks the resource from being complete, until it gets
    ## the signal from the containers UserData. Commenting both out for now.
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT15M

  V2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Subnets:
        - !GetAtt VPC.Outputs.PublicSubnet1
        - !GetAtt VPC.Outputs.PublicSubnet2
      Scheme: internet-facing
      # SecurityGroups:
      # - !GetAtt ContainerSecurityGroup.GroupId





  ###################
  ## IAM Resources ##
  ###################
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # A role used to allow AWS Autoscaling to inspect stats and adjust scalable targets
  # on your AWS account
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communicate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'

              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'

              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information about how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'




  ###################
  ## VPC Resources ##
  ###################
  # From: https://github.com/aws-samples/ecs-refarch-cloudformation/blob/master/master.yaml
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs-refarch-cloudformation/infrastructure/vpc.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VpcCIDR: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
        PublicSubnet1CIDR: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
        PublicSubnet2CIDR: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
        PrivateSubnet1CIDR: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
        PrivateSubnet2CIDR: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']

  ###################
  ## VPC Resources ##
  ###################
  # # Guide for specifically a VPC from:
  # # https://dev.to/tiamatt/hands-on-aws-cloudformation-part-4-create-vpc-with-private-and-public-subnets-85d

  # # VPC in which containers will be networked.
  # # It has two public subnets
  # # We distribute the subnets across the first two available subnets
  # # for the region, for high availability.
  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     EnableDnsSupport: true # let instances in the VPC get DNS hostnames
  #     EnableDnsHostnames: true # allow DNS resolution
  #     CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub GameManager-${AWS::StackName}

  # # Two public subnets, where containers can have public IP addresses
  # # (will be public once it is associated with public route table)
  # PublicSubnetOne:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone:
  #        Fn::Select:
  #        - 0
  #        - Fn::GetAZs: { Ref: 'AWS::Region' }
  #     VpcId: !Ref 'VPC'
  #     CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
  #     MapPublicIpOnLaunch: true # allow instances launched in this subnet receive a public IPv4 address
  # PublicSubnetTwo:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone:
  #        Fn::Select:
  #        - 1
  #        - Fn::GetAZs: { Ref: 'AWS::Region' }
  #     VpcId: !Ref 'VPC'
  #     CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
  #     MapPublicIpOnLaunch: true # allow instances launched in this subnet receive a public IPv4 address

  # # Setup networking resources for the public subnets. Containers
  # # in the public subnets have public IP addresses and the routing table
  # # sends network traffic via the internet gateway.
  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway

  # GatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     VpcId: !Ref 'VPC'
  #     InternetGatewayId: !Ref 'InternetGateway'

  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref 'VPC'

  # PublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: GatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref 'PublicRouteTable'
  #     DestinationCidrBlock: '0.0.0.0/0'
  #     GatewayId: !Ref 'InternetGateway'

  # # Associate the PublicRouteTable with BOTH public subnets:
  # PublicSubnetOneRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnetOne
  #     RouteTableId: !Ref PublicRouteTable
  # PublicSubnetTwoRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnetTwo
  #     RouteTableId: !Ref PublicRouteTable

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  Url:
    Description: The URL that you can hit the server from
    Value: !GetAtt V2LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}:Url"

